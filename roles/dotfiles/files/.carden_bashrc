# Enabled to get colored ls command in iterm2 after installing solarized
export CLICOLOR=1

# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi


# Function to get info about what virtualenv you're currently in so you can add to PS1.
function virtualenv_info(){
    # Get Virtual Env
    if [[ -n "$VIRTUAL_ENV" ]]; then
        # Strip out the path and just leave the env name
        venv="${VIRTUAL_ENV##*/}"
    else
        # In case you don't have one activated
        venv=''
    fi
    [[ -n "$venv" ]] && echo "($venv) "
}

# disable the default virtualenv prompt change
export VIRTUAL_ENV_DISABLE_PROMPT=1

VENV="\$(virtualenv_info)";
# the '...' are for irrelevant info here.
# export PS1="... ${VENV} ..."
export PS1="\u@\h:\w\$ "

# Function to handle formatting of PS1.
# TODO(carden): Debug the escape sequences here.
ps1_stuff() {
  # Handle color_prompt logic from before in PS1.
  # TODO(carden): Determine the source for this and ensure it's not causing issues.
  if [ "$color_prompt" = yes ]; then
      # PS1=$auth_str", "'${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
      PS1=$auth_str", "'${debian_chroot:+($debian_chroot)}\u@\h:\w\\$'
  else
      # PS1=$auth_str", "'${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
      PS1=$auth_str", "'${debian_chroot:+($debian_chroot)}\u@\h:\w\\$ '
  fi
  unset color_prompt force_color_prompt

  # If this is an xterm set the title to user@host:dir
  case "$TERM" in
  xterm*|rxvt*)
      # PS1=$auth_str", ""\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]"
      PS1=$auth_str", ${debian_chroot:+($debian_chroot)}\u@\h:\w\\$ "
      ;;
  *)
      ;;
  esac

  # Prepend VENV status to PS1 here.
  PS1="${VENV}"$PS1
}
PROMPT_COMMAND=ps1_stuff
# Some debug stuff
# PROMPT_COMMAND=$(echo '')
# PS1=""

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

# Setup terminal colors in tmux
alias tmux="TERM=screen-256color-bce tmux"

# Checks if a tmux session is active. If not, starts one named 'carden'.
# If already exists, then it attaches to 'carden'
if [ ! $TMUX ]; then
    tmux new-session -A -s carden
fi


alias gitflow="python3 ~/.local/bin/gitflow"


# Manage virtual environments
export VIRTUALENVWRAPPER_PYTHON=$(which python3)
export WORKON_HOME=~/Envs
mkdir -p $WORKON_HOME
VENV_FILE=~/.local/bin/virtualenvwrapper.sh
OTHER_VENV_FILE=/usr/local/bin/virtualenvwrapper.sh
if [[ -f "$VENV_FILE" ]]; then
  . $VENV_FILE
elif [[ -f "$OTHER_VENV_FILE" ]]; then
  . $OTHER_VENV_FILE
fi

export EDITOR=vim
# Needed to fix an issue with auth ssh over tmux on the host machine.
# Requires changes to ~/.tmux.conf as well.
# More info here: https://blog.testdouble.com/posts/2016-11-18-reconciling-tmux-and-ssh-agent-forwarding/
# TODO(carden): Put this in ~/.ssh/rc
if test "$SSH_AUTH_SOCK" ; then
  ln -sf $SSH_AUTH_SOCK ~/.ssh/ssh_auth_sock
fi

# Enables vi mode for the terminal.
set -o vi;

# Create a find and replace function using ripgrep + sed.
# I don't think this will handle escaping characters well.
ripgrep_replace() {
    src=$1
    dst=$2
    rg "${src}" -l | xargs sed -i "s/${src}/${dst}/g"
}
alias ripgrep-replace=ripgrep_replace

# Runs a simple http server using python3.
# First arg is a port number.
alias server="python3 -m http.server $1"

# Prune docker images older than one week (7 * 24hr = 168hr)
# https://stackoverflow.com/questions/50737059/how-to-remove-docker-images-which-created-7-days-ago-automatically
alias docker-prune-old="docker image prune -a --force --filter 'until=168h'"

# Allows for tmux-ing to a server with iterm2 integration.
# Ex: tmux_ssh personal-desktop # Where personal-desktop is an ssh alias.
tmux_ssh() {
  ssh -t "$1" 'tmux -CC new -A -s carden';
}
